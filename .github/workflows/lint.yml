name: Entur/Terraform/Lint

on:
  workflow_call:
    inputs:
      directory:
        description: "Path to Terraform Directory"
        type: string
        default: "terraform"
      version:
        description: "Terraform version"
        type: string
        default: "latest"
      timeout_minutes:
        description: "Job timeout in minutes"
        type: number
        default: 5
env:
  GHA_TERRAFORM_LINT_DIRECTORY: ${{ inputs.directory }}
  GHA_TERRAFORM_LINT_VERSION: ${{ inputs.version }}
jobs:
  lint:
    name: Terraform Lint
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout_minutes }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.GHA_TERRAFORM_LINT_VERSION }}
          terraform_wrapper: false
      - uses: terraform-linters/setup-tflint@v4
        with:
          tflint_wrapper: true
      - run: |
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          NEUTRAL='\033[0m'
          printf "%bChecking Terraform files for formatting issues: %b\n" "${YELLOW}" "${NEUTRAL}"
          printf "----------------------------------------\n"
          if ! terraform -chdir=${GHA_TERRAFORM_LINT_DIRECTORY} fmt -check -recursive; then
            printf "----------------------------------------\n"
            printf "%bERROR%b: Terraform files are not formatted correctly\n" "${RED}" "${NEUTRAL}"
            printf "Please run 'terraform fmt -recursive' to fix the formatting issues in the files listed above.\n"
            printf "ps: this can be automated in VS Code or IntelliJ by installing the Terraform extension and enabling 'Format on Save'\n\n"
            exit 1
          else
            printf "Formating: %bOK%b\n" "${GREEN}" "${NEUTRAL}"
          fi

          printf "%bRunning TFLint: %b\n" "${YELLOW}" "${NEUTRAL}"
          tflint --init
          if ! tflint --chdir=${GHA_TERRAFORM_LINT_DIRECTORY} --recursive; then
            printf "\n\\e[1;31mERROR\\e[0m: TFLint found issues in the Terraform configuration\n"
            printf "Please check the error messages above and fix the issue\n\n"
            exit 1
          else
            printf "TFLint: %bOK%b\n" "${GREEN}" "${NEUTRAL}"
          fi

          printf "%bInitializing Terraform Configuration to check for provider plugins issues: %b\n" "${YELLOW}" "${NEUTRAL}"
          if ! terraform -chdir=${GHA_TERRAFORM_LINT_DIRECTORY} init -backend=false; then
            printf "\n%bERROR%b: Terraform configuration could not be initialized\n" "${RED}" "${NEUTRAL}"
            printf "Please check the error messages above and fix the issue\n\n"
            exit 1
          else
            printf "Initialization: %bOK%b\n" "${GREEN}" "${NEUTRAL}"
          fi

          printf "%bValidating Terraform Configuration: %b\n" "${YELLOW}" "${NEUTRAL}"
          if ! terraform -chdir=${GHA_TERRAFORM_LINT_DIRECTORY} validate; then
            printf "\n%bERROR%b: Terraform configuration is not valid\n" "${RED}" "${NEUTRAL}"
            printf "Please check the error messages above and fix the issue\n\n"
            exit 1
          else
            printf "Validation: %bOK%b\n" "${GREEN}" "${NEUTRAL}"
          fi
