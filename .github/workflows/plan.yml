name: Entur/Terraform/Plan

on:
  workflow_call:
    inputs:
      directory:
        description: "Path to Terraform Directory"
        type: string
        default: "terraform"
      cloud_provider:
        description: "The cloud provider for this project"
        type: string
        default: "GCP"
      environment:
        description: "The cloud environment"
        type: string
        default: "dev"
      workspace:
        description: "The terraform workspace, defaults to env"
        type: string
        default: "env"
      version:
        description: "Terraform version"
        type: string
        default: "latest"
      project_id:
        type: string
        description: "Do not use this input"
      cluster_name:
        type: string
        description: "Do not use this input"
      timeout_minutes:
        description: "Job timeout in minutes"
        type: number
        default: 10

jobs:
  terraform-plan:
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout_minutes }}
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - id: set-env
        shell: bash
        run: |
          echo "GHA_TERRAFORM_PLAN_DIRECTORY=${{ inputs.directory }}" >> $GITHUB_ENV
          echo "GHA_TERRAFORM_PLAN_CLOUD_PROVIDER=${{ inputs.cloud_provider }}" >> $GITHUB_ENV
          echo "GHA_TERRAFORM_PLAN_ENVIRONMENT=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "GHA_TERRAFORM_PLAN_WORKSPACE=${{ inputs.workspace }}" >> $GITHUB_ENV
          echo "GHA_TERRAFORM_PLAN_VERSION=${{ inputs.version }}" >> $GITHUB_ENV

      - id: set-workspace
        shell: bash
        run: |
          if [[ "${{ env.GHA_TERRAFORM_PLAN_WORKSPACE }}" = "env" ]]; then
            echo "GHA_TERRAFORM_PLAN_WORKSPACE=${{ env.GHA_TERRAFORM_PLAN_ENVIRONMENT }}" >> $GITHUB_ENV
          fi

      - name: checkout
        uses: actions/checkout@v4

      - uses: entur/gha-meta/.github/actions/cloud-auth@v1.1.1
        with:
          environment: ${{ env.GHA_TERRAFORM_PLAN_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_PLAN_CLOUD_PROVIDER }}
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}
          azure_client_id: ${{ vars.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ vars.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - uses: entur/gha-meta/.github/actions/k8s-auth@v1.1.1
        with:
          environment: ${{ env.GHA_TERRAFORM_PLAN_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_PLAN_CLOUD_PROVIDER }}
          project_id: ${{ inputs.project_id }}
          cluster_name: ${{ inputs.cluster_name }}
          azure_cluster_resource_group: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
          azure_cluster_name: ${{ vars.AZURE_CLUSTER_NAME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup
        with:
          terraform_version: ${{ env.GHA_TERRAFORM_PLAN_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ env.GHA_TERRAFORM_PLAN_DIRECTORY }}
        shell: bash
        run: |
          terraform init

      - name: Terraform Workspace
        id: workspace
        working-directory: ${{ env.GHA_TERRAFORM_PLAN_DIRECTORY }}
        shell: bash
        run: |
          terraform workspace select -or-create=true ${{ env.GHA_TERRAFORM_PLAN_WORKSPACE }}

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.GHA_TERRAFORM_PLAN_DIRECTORY }}
        shell: bash
        run: |
          terraform plan \
            -var-file=env/${{ env.GHA_TERRAFORM_PLAN_ENVIRONMENT }}.tfvars \
            -detailed-exitcode \
            -no-color \
            -out=tfplan 2 \
            >&1 | xargs | xargs printf "plan=%s" >> $GITHUB_OUTPUT
          TFSTATUS=(${PIPESTATUS[0]})
          if [[ $TFSTATUS -eq 0 ]]; then
            echo "GHA_TERRAFORM_PLAN_STATUS='No Changes'" >> $GITHUB_ENV
          elif [[ $TFSTATUS -eq 2 ]]; then
            echo "GHA_TERRAFORM_PLAN_STATUS='Changes Detected'" >> $GITHUB_ENV
          else
            echo "GHA_TERRAFORM_PLAN_STATUS='Error'" >> $GITHUB_ENV
          fi

      - name: Terraform Plan Status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && env.GHA_TERRAFORM_PLAN_STATUS == 'Changes Detected'
        with:
          script: |
            const output = `#### Terraform Plan ${{ env.GHA_TERRAFORM_PLAN_ENVIRONMENT }} ðŸ“–\` ${{ env.GHA_TERRAFORM_PLAN_STATUS }}\`

            Terraform plan detected changes

            \`\`\`tf\n
            ${{ steps.plan.outputs.plan }}
            \`\`\`

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && env.GHA_TERRAFORM_PLAN_STATUS == 'No Changes'
        with:
          script: |
            const output = `#### Terraform Plan ${{ env.GHA_TERRAFORM_PLAN_ENVIRONMENT }} ðŸ“– \`${{ env.GHA_TERRAFORM_PLAN_STATUS }}\`

            Terraform plan did not detect any changes

            <details><summary>Show Plan</summary>

            \`\`\`tf\n
            ${{ steps.plan.outputs.plan }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && env.GHA_TERRAFORM_PLAN_STATUS == 'Error'
        with:
          script: |
            const output = `#### Terraform Plan ${{ env.GHA_TERRAFORM_PLAN_ENVIRONMENT }} ðŸ“– \`${{ env.GHA_TERRAFORM_PLAN_STATUS }}\`

            Terraform plan had an error

            <details><summary>Show Plan Error</summary>

            \`\`\`tf\n
            ${{ steps.plan.outputs.plan }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' || env.GHA_TERRAFORM_PLAN_STATUS == 'Error'
        run: exit 1
