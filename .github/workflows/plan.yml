name: Entur/Terraform/Plan

on:
  workflow_call:
    inputs:
      tf_directory:
        description: "Path to Terraform Directory"
        type: string
        default: "terraform"
      cloud_provider:
        description: "The cloud provider for this project"
        type: string
        default: "GCP"
      environment:
        description: "The cloud environment"
        type: string
        default: "dev"
      tf_workspace:
        description: "The terraform workspace"
        type: string
        default: "dev"
      tf_version:
        description: "Terraform version"
        type: string
        default: "latest"

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      id-token: write
    steps:
      - id: set-env
        shell: bash
        run: |
          echo "GHA_TERRAFORM_DIRECTORY=${{ inputs.tf_directory }}" >> $GITHUB_ENV
          echo "GHA_CLOUD_PROVIDER=${{ inputs.cloud_provider }}" >> $GITHUB_ENV
          echo "GHA_ENVIRONMENT=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "GHA_TERRAFORM_WORKSPACE=${{ inputs.tf_workspace }}" >> $GITHUB_ENV
          echo "GHA_TERRAFORM_VERSION=${{ inputs.tf_version }}" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v4

      - name: Access gcp
        id: login-gcp
        uses: google-github-actions/auth@v2.1.2
        if: env.GHA_CLOUD_PROVIDER == 'GCP'
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup
        with:
          terraform_version: ${{ env.GHA_TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform init

      - name: Terraform Workspace
        id: workspace
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform workspace select ${{ env.GHA_TERRAFORM_WORKSPACE }} || terraform workspace new ${{ env.GHA_TERRAFORM_WORKSPACE }}

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          echo 'plan<<EOF' >> $GITHUB_OUTPUT
          terraform plan -var-file=env/${{ env.GHA_ENVIRONMENT }}.tfvars -no-color -out=tfplan >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
  
            </details>
  
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1