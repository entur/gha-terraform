name: Entur/Terraform/Plan

on:
  workflow_call:
    inputs:
      directory:
        description: "Path to Terraform Directory"
        type: string
        default: "terraform"
      cloud_provider:
        description: "Which cloud service provider to use - Google Cloud: 'gcp' or Azure: 'az'"
        type: string
        default: "gcp"
      environment:
        type: string
        description: "GitHub environment to use Google Cloud: (dev, tst, prd) or Azure: (az-dev, az-test, az-prod)"
        required: true
      workspace:
        description: "The terraform workspace, defaults to environment input"
        type: string
        default: "env"
      version:
        description: "Terraform version"
        type: string
        default: "latest"
      gcp_project_id:
        type: string
        description: "N/A"
      gcp_cluster_name:
        type: string
        description: "N/A"
      timeout_minutes:
        description: "Job timeout in minutes"
        type: number
        default: 10

jobs:
  terraform-plan:
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout_minutes }}
    environment: ${{ inputs.environment }}
    env:
      GHA_TERRAFORM_DIRECTORY: ${{ inputs.directory }}
      GHA_TERRAFORM_CLOUD_PROVIDER: ${{ inputs.cloud_provider }}
      GHA_TERRAFORM_ENVIRONMENT: ${{ inputs.environment }}
      GHA_TERRAFORM_WORKSPACE: ${{ inputs.workspace }}
      GHA_TERRAFORM_VERSION: ${{ inputs.version }}
      GHA_TERRAFORM_PROJECT_ID: ${{ inputs.project_id }}
      GHA_TERRAFORM_CLUSTER_NAME: ${{ inputs.cluster_name }}
      GHA_TERRAFORM_STATUS: ""
      # ignore "context access might be invalid" warning
      WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
      SERVICE_ACCOUNT: ${{ vars.SERVICE_ACCOUNT }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLUSTER_NAME: ${{ vars.AZURE_CLUSTER_NAME  }}
      AZURE_CLUSTER_RESOURCE_GROUP: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - id: set-workspace
        shell: bash
        if: env.GHA_TERRAFORM_WORKSPACE == 'env'
        run: |
          echo "GHA_TERRAFORM_WORKSPACE=${GHA_TERRAFORM_ENVIRONMENT}" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v4

      - uses: entur/gha-meta/.github/actions/cloud-auth@v1
        name: Authenticate
        with:
          environment: ${{ env.GHA_TERRAFORM_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_CLOUD_PROVIDER }}
          gcp_workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          gcp_service_account: ${{ env.SERVICE_ACCOUNT }}
          azure_client_id: ${{ env.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ env.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - uses: entur/gha-meta/.github/actions/k8s-auth@v1
        with:
          environment: ${{ env.GHA_TERRAFORM_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_CLOUD_PROVIDER }}
          gcp_project_id: ${{ inputs.project_id }}
          gcp_cluster_name: ${{ inputs.cluster_name }}
          azure_cluster_resource_group: ${{ env.AZURE_CLUSTER_RESOURCE_GROUP }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup
        with:
          terraform_version: ${{ env.GHA_TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform version
          terraform init

      - name: Terraform Workspace
        id: workspace
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform workspace select -or-create=true ${GHA_TERRAFORM_WORKSPACE}

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          delimiter="$(openssl rand -hex 10)"
          # allow exit code > 0 to print failure in comment
          set +e
          terraform plan -var-file=env/${GHA_TERRAFORM_ENVIRONMENT}.tfvars -detailed-exitcode -no-color -out tfplan
          TFSTATUS=$?
          set -e
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          ENV=$(echo "${GHA_TERRAFORM_ENVIRONMENT}"| awk '{print toupper($0)}')
          echo "plan<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan $ENV" >> $GITHUB_OUTPUT
          if [[ $TFSTATUS -eq 0 ]]; then
            echo "GHA_TERRAFORM_STATUS='No Changes'" >> $GITHUB_ENV
            echo "#### Status: No Changes" >> $GITHUB_OUTPUT
          elif [[ $TFSTATUS -eq 2 ]]; then
            echo "GHA_TERRAFORM_STATUS='Changes Detected'" >> $GITHUB_ENV
            echo "#### Status: Changes Detected ðŸ“–" >> $GITHUB_OUTPUT
          else
            echo "GHA_TERRAFORM_STATUS='Error'" >> $GITHUB_ENV
            echo "#### Status: Plan Failed" >> $GITHUB_OUTPUT
          fi
          echo "The result of \`terraform plan\` in environment: \`$ENV\`" >> $GITHUB_OUTPUT
          echo '```tf' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Terraform Plan Status
        env:
          PLAN: ${{ steps.plan.outputs.plan }}
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const body = `${process.env.PLAN}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

      - name: Terraform Plan Status Check
        if: ${{ env.GHA_TERRAFORM_STATUS == 'Error'}}
        shell: bash
        run: |
          echo $env.GHA_TERRAFORM_STATUS
          set -e
          exit 1
