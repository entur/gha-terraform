name: Entur/Terraform/Plan

on:
  workflow_call:
    inputs:
      directory:
        description: "Path to Terraform Directory"
        type: string
        default: "terraform"
      cloud_provider:
        description: "Which cloud service provider to use - Google Cloud: 'gcp' or Azure: 'az'"
        type: string
        default: "gcp"
      environment:
        type: string
        description: "GitHub environment to use Google Cloud: (dev, tst, prd) or Azure: (az-dev, az-test, az-prod)"
        required: true
      workspace:
        description: "The terraform workspace, defaults to environment input"
        type: string
        default: "env"
      version:
        description: "Terraform version, nb: Setting this, overrides the version defined in code. If not set in code, the latest version is used."
        type: string
        default: "latest"
      gcp_project_id:
        type: string
        description: "N/A"
      gcp_cluster_name:
        type: string
        description: "N/A"
      timeout_minutes:
        description: "Job timeout in minutes"
        type: number
        default: 10
    outputs:
      version:
        description: "Terraform version"
        value: ${{ jobs.terraform-plan.outputs.version }}

jobs:
  terraform-plan:
    runs-on: ubuntu-24.04
    timeout-minutes: ${{ inputs.timeout_minutes }}
    environment: ${{ inputs.environment }}
    env:
      GHA_TERRAFORM_DIRECTORY: ${{ inputs.directory }}
      GHA_TERRAFORM_CLOUD_PROVIDER: ${{ inputs.cloud_provider }}
      GHA_TERRAFORM_ENVIRONMENT: ${{ inputs.environment }}
      GHA_TERRAFORM_WORKSPACE: ${{ inputs.workspace }}
      GHA_TERRAFORM_VERSION: ${{ inputs.version }}
      GHA_TERRAFORM_GCP_PROJECT_ID: ${{ inputs.gcp_project_id }}
      GHA_TERRAFORM_GCP_CLUSTER_NAME: ${{ inputs.gcp_cluster_name }}
      GHA_TERRAFORM_STATUS: ""
      GHA_TERRAFORM_SUMMARY: ""
      # ignore "context access might be invalid" warning
      WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
      SERVICE_ACCOUNT: ${{ vars.SERVICE_ACCOUNT }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLUSTER_NAME: ${{ vars.AZURE_CLUSTER_NAME  }}
      AZURE_CLUSTER_RESOURCE_GROUP: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    outputs:
      version: ${{ steps.set-terraform-version.outputs.version }}
    steps:
      - id: set-workspace
        shell: bash
        if: env.GHA_TERRAFORM_WORKSPACE == 'env'
        run: |
          echo "GHA_TERRAFORM_WORKSPACE=${GHA_TERRAFORM_ENVIRONMENT}" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v4

      - uses: entur/gha-meta/.github/actions/cloud-auth@v1
        name: Authenticate
        with:
          environment: ${{ env.GHA_TERRAFORM_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_CLOUD_PROVIDER }}
          gcp_workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          gcp_service_account: ${{ env.SERVICE_ACCOUNT }}
          azure_client_id: ${{ env.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ env.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - uses: entur/gha-meta/.github/actions/k8s-auth@v1
        with:
          environment: ${{ env.GHA_TERRAFORM_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_CLOUD_PROVIDER }}
          gcp_project_id: ${{ env.GHA_TERRAFORM_GCP_PROJECT_ID }}
          gcp_cluster_name: ${{ env.GHA_TERRAFORM_GCP_CLUSTER_NAME }}
          azure_cluster_resource_group: ${{ env.AZURE_CLUSTER_RESOURCE_GROUP }}

      - name: "Terraform Version Action"
        id: set-terraform-version
        uses: entur/gha-terraform/.github/actions/terraform-version@v1
        with:
          directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
          version: ${{ env.GHA_TERRAFORM_VERSION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.version }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform version
          terraform init

      - name: Terraform Workspace
        id: workspace
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform workspace select -or-create=true ${GHA_TERRAFORM_WORKSPACE}

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          set +e
          terraform plan -var-file=env/${GHA_TERRAFORM_ENVIRONMENT}.tfvars -detailed-exitcode -out tfplan
          echo "GHA_TERRAFORM_STATUS=$?" >> $GITHUB_ENV
          set -e

      - if: env.GHA_TERRAFORM_STATUS == 2
        name: Terraform Changes Detected
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          # Save the plan output to a file so we can upload as a artifact and add a download link to the PR comment
          terraform show -no-color tfplan > tfplan.tf
          # Create highlights of the changes
          GHA_TERRAFORM_SUMMARY=$(terraform show -no-color tfplan |grep -E '(^[[:punct:]]|Plan)')
          echo "GHA_TERRAFORM_SUMMARY=${GHA_TERRAFORM_SUMMARY}" >> $GITHUB_ENV
      - if: env.GHA_TERRAFORM_STATUS == 2
        name: Split plan and create summary
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          # Split the files on 60k characters, but only on double newlines
          cat > split.awk << EOF
          BEGIN {
            RS = "\n\n"
            ORS = "\n\n"
            maxlen = 2000
            i = 1
          }
          {
            reclen = length(\$0) + 2
            l = n + reclen
            if (l > maxlen) {
                i++
                n = 0
            }
            n += reclen
            print \$0 > FILENAME"."i
          }
          EOF
          # Split the files
          awk -f split.awk tfplan.tf
      - if: env.GHA_TERRAFORM_STATUS != 0 && env.GHA_TERRAFORM_STATUS != 2
        name: Terraform Plan Status Check
        shell: bash
        run: |
          echo GHA_TERRAFORM_SUMMARY="Plan failed" >> $GITHUB_ENV
          exit 99

      - name: Delete previous plan comments for same environment
        uses: actions/github-script@v7
        with:
          script: |
            function printf(format, ...values) {
              return values.reduce((carry, current) => carry.replace('%s', current), format);
            }
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const commentsFilter = printf('Terraform Plan %s', process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase());
            console.log(commentsFilter);

            for (const comment of comments) {
              if (comment.user.login === 'github-actions[bot]' && comment.body.includes(commentsFilter)) {
              console.log(comment.body);
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              }
            }
      - name: Upload Plan
        id: upload
        if: env.GHA_TERRAFORM_STATUS == 2
        uses: actions/upload-artifact@v4
        with:
          name: tfplan.tf
          path: ${{ env.GHA_TERRAFORM_DIRECTORY }}/tfplan.tf
          if-no-files-found: error
      - if: env.GHA_TERRAFORM_STATUS == 2 && github.event_name == 'pull_request'
        name: Terraform Plan Status
        uses: actions/github-script@v7
        with:
          script: |
            function printf(format, ...values) {
              return values.reduce((carry, current) => carry.replace('%s', current), format);
            }
            function filesort(x,y) {
              x=parseInt(x.split('.').slice(-1));
              y=parseInt(y.split('.').slice(-1));
              return x<y ? -1 : x>y ? 1 : 0;
            }
            const artifactResponse = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const artifact = artifactResponse.data.artifacts.find(a => a.name === 'tfplan.tf');
            if (!artifact) {
              throw new Error('Artifact not found');
            }
            const artifact_id = artifact.id;
            console.log(`Artifact ID: ${artifact_id}`);

            const fs = require('fs')
            const globber = await glob.create(`${process.env.GHA_TERRAFORM_DIRECTORY}/tfplan.tf.*`)
            const files = await globber.glob()
            files.sort(filesort)
            const codeblockstart = '```tf\n'
            const codeblockend = '\n```\n'
            const downloadlink = printf('\n[Download Plan](%s/%s/actions/runs/%s/artifacts/%s)', process.env.GITHUB_SERVER_URL, process.env.GITHUB_REPOSITORY, process.env.GITHUB_RUN_ID, artifact_id)
            let plan = '';
            let n = 0;
            let body = '';
            let header = '';
            for (const file of files) {
              console.log(`Processing file: ${file}`)
              plan = fs.readFileSync(file, 'utf8')

              if (files.length > 1) {
                n++
                header = printf('## Terraform Plan %s - Part %s/%s \n\n', process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase(), n, files.length)
                if (n == 1) {
                  body = printf('%s%s%s%s%s%s%s%s\n', header,codeblockstart, process.env.GHA_TERRAFORM_SUMMARY, codeblockend, codeblockstart, plan, codeblockend, downloadlink)
                } else {
                  body = printf('%s%s%s%s\n', header,codeblockstart, plan, codeblockend)
                }
              }else{
                header = printf('## Terraform Plan %s\n\n', process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase())
                body = printf('%s%s%s%s%s%s%s%s\n', header,codeblockstart, process.env.GHA_TERRAFORM_SUMMARY, codeblockend, codeblockstart, plan, codeblockend, downloadlink)
              }

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              })
            }
      - if: env.GHA_TERRAFORM_STATUS == 0 && github.event_name == 'pull_request'
        name: No Changes
        uses: actions/github-script@v7
        with:
          script: |
            function printf(format, ...values) {
              return values.reduce((carry, current) => carry.replace('%s', current), format);
            }
            const body = printf('### Terraform Plan %s - No Changes found\n\n', process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase())
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
