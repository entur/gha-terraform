name: Entur/Terraform/Apply

on:
  workflow_call:
    inputs:
      directory:
        description: "Path to Terraform Directory"
        type: string
        default: "terraform"
      cloud_provider:
        description: "Which cloud service provider to use - Google Cloud: 'gcp' or Azure: 'az'"
        type: string
        default: "gcp"
      environment:
        type: string
        description: "GitHub environment to use Google Cloud: (dev, tst, prd) or Azure: (az-dev, az-test, az-prod)"
        required: true
      workspace:
        description: "The terraform workspace, defaults to environment input"
        type: string
        default: "env"
      version:
        description: "Terraform version, nb: Setting this, overrides the version defined in code. If not set in code, the latest version is used."
        type: string
        default: "latest"
      gcp_project_id:
        type: string
        description: "N/A"
      gcp_cluster_name:
        type: string
        description: "N/A"
      timeout_minutes:
        description: "Job timeout in minutes"
        type: number
        default: 60
    outputs:
      version:
        description: "Terraform version"
        value: ${{ jobs.terraform-apply.outputs.version }}

jobs:
  terraform-apply:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.set-terraform-version.outputs.version }}
    timeout-minutes: ${{ inputs.timeout_minutes }}
    environment: ${{ inputs.environment }}
    env:
      GHA_TERRAFORM_DIRECTORY: ${{ inputs.directory }}
      GHA_TERRAFORM_CLOUD_PROVIDER: ${{ inputs.cloud_provider }}
      GHA_TERRAFORM_ENVIRONMENT: ${{ inputs.environment }}
      GHA_TERRAFORM_WORKSPACE: ${{ inputs.workspace }}
      GHA_TERRAFORM_VERSION: ${{ inputs.version }}
      GHA_TERRAFORM_GCP_PROJECT_ID: ${{ inputs.gcp_project_id }}
      GHA_TERRAFORM_GCP_CLUSTER_NAME: ${{ inputs.gcp_cluster_name }}
      GHA_TERRAFORM_PLAN_STATUS: 0
      GHA_TERRAFORM_PLAN_SUMMARY: ""
      GHA_TERRAFORM_APPLY_STATUS: 0
      GHA_TERRAFORM_APPLY_SUMMARY: ""
      # ignore "context access might be invalid" warning
      GHA_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
      GHA_SERVICE_ACCOUNT: ${{ vars.SERVICE_ACCOUNT }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLUSTER_NAME: ${{ vars.AZURE_CLUSTER_NAME  }}
      AZURE_CLUSTER_RESOURCE_GROUP: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Set Terraform Workspace
        shell: bash
        if: env.GHA_TERRAFORM_WORKSPACE == 'env'
        run: |
          echo "GHA_TERRAFORM_WORKSPACE=${GHA_TERRAFORM_ENVIRONMENT}" >> $GITHUB_ENV

      - name: Set Cluster Name
        shell: bash
        if: inputs.cloud_provider == 'az'
        env:
          GHA_TERRAFORM_CLUSTER_NAME: ${{ env.AZURE_CLUSTER_NAME  }}
        run: |
          if [ -z "${{ env.GHA_TERRAFORM_CLUSTER_NAME }}" ]; then
            echo "GitHub repository environment variable AZURE_CLUSTER_NAME is not set. Setup using tf-azure-apps. Exiting."
            exit 1
          fi
          echo "GHA_TERRAFORM_CLUSTER_NAME=${GHA_TERRAFORM_CLUSTER_NAME}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v5

      - name: Authenticate with Cloud Provider
        uses: entur/gha-meta/.github/actions/cloud-auth@v1
        with:
          environment: ${{ env.GHA_TERRAFORM_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_CLOUD_PROVIDER }}
          gcp_workload_identity_provider: ${{ env.GHA_WORKLOAD_IDENTITY_PROVIDER }}
          gcp_service_account: ${{ env.GHA_SERVICE_ACCOUNT }}
          azure_client_id: ${{ env.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ env.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Authenticate with Kubernetes
        uses: entur/gha-meta/.github/actions/k8s-auth@v1
        with:
          environment: ${{ env.GHA_TERRAFORM_ENVIRONMENT }}
          cloud_provider: ${{ env.GHA_TERRAFORM_CLOUD_PROVIDER }}
          gcp_project_id: ${{ env.GHA_TERRAFORM_GCP_PROJECT_ID }}
          gcp_cluster_name: ${{ env.GHA_TERRAFORM_GCP_CLUSTER_NAME }}
          azure_cluster_resource_group: ${{ env.AZURE_CLUSTER_RESOURCE_GROUP }}

      - name: Set Terraform Version
        id: set-terraform-version
        uses: entur/gha-terraform/.github/actions/terraform-version@v2
        with:
          directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
          version: ${{ env.GHA_TERRAFORM_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.set-terraform-version.outputs.version }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform version
          terraform init

      - name: Terraform Workspace
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          terraform workspace select -or-create=true ${GHA_TERRAFORM_WORKSPACE}

      - name: Terraform Plan
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          set +e
          # Run terraform plan and save the plan to a file, but also save any errors to a variable
          { err=$(terraform plan -var-file=env/${GHA_TERRAFORM_ENVIRONMENT}.tfvars -detailed-exitcode -no-color -out tfplan 2>&1 >&3 3>&-); } 3>&1
          echo "GHA_TERRAFORM_PLAN_STATUS=$?" >> $GITHUB_ENV
          set -e
          # Save the multiline error to the Summary, if empty/ok, it will be overwritten later
          echo "GHA_TERRAFORM_PLAN_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "${err}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Save the plan output to a file so we can upload as a artifact
          terraform show -no-color tfplan > tfplan.txt

      - if: env.GHA_TERRAFORM_PLAN_STATUS == 2
        name: Terraform Apply
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          set +e
          # Apply the plan, but also save any errors to the file
          terraform apply -no-color tfplan 2>&1|tee tfapply.txt
          echo "GHA_TERRAFORM_APPLY_STATUS=${PIPESTATUS[0]}" >> $GITHUB_ENV
          set -e

      - if: env.GHA_TERRAFORM_PLAN_STATUS == 2 && env.GHA_TERRAFORM_APPLY_STATUS == 0
        name: Terraform Changes Detected
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          # Create highlights of the changes
          GHA_TERRAFORM_APPLY_SUMMARY=$(cat tfapply.txt |grep -E '(^[[:punct:]]|Apply complete)')
          # Handle multiline output
          echo "GHA_TERRAFORM_APPLY_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "${GHA_TERRAFORM_APPLY_SUMMARY}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo ":page_facing_up: ${GHA_TERRAFORM_APPLY_SUMMARY}" >> $GITHUB_STEP_SUMMARY

      - if: env.GHA_TERRAFORM_PLAN_STATUS == 2 && env.GHA_TERRAFORM_APPLY_STATUS == 0
        name: Upload Artifacts
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfapply_${{ env.GHA_TERRAFORM_ENVIRONMENT }}.txt
          path: |
            ${{ env.GHA_TERRAFORM_DIRECTORY }}/tfapply.txt
            ${{ env.GHA_TERRAFORM_DIRECTORY }}/tfplan.txt
          if-no-files-found: error
          overwrite: true

      - if: env.GHA_TERRAFORM_PLAN_STATUS == 2 && env.GHA_TERRAFORM_APPLY_STATUS == 0
        name: Split apply output
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          # Split the files on maxlen characters, but only on double newlines
          cat > split.awk << EOF
          BEGIN {
            RS = "\n\n"
            ORS = "\n\n"
            maxlen = 55000
            i = 1
          }
          {
            reclen = length(\$0) + 2
            l = n + reclen
            if (l > maxlen) {
                i++
                n = 0
            }
            n += reclen
            print \$0 > FILENAME"."i
          }
          EOF
          # Split the files
          awk -f split.awk tfapply.txt

      - name: Delete previous apply comments for same environment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const commentsFilter = `Terraform Apply ${process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase()}`;
            console.log(commentsFilter);

            for (const comment of comments) {
              if (comment.user.login === 'github-actions[bot]' && comment.body.includes(commentsFilter)) {
              console.log(comment.body);
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              }
            }

      - if: env.GHA_TERRAFORM_PLAN_STATUS == 2 && github.event_name == 'pull_request'
        name: Terraform Apply Status
        uses: actions/github-script@v8
        env:
          GHA_ARTIFACT_DOWNLOAD_LINK: ${{ steps.upload-artifact.outputs.artifact-url }}
        with:
          script: |
            function filesort(x,y) {
              x=parseInt(x.split('.').slice(-1));
              y=parseInt(y.split('.').slice(-1));
              return x<y ? -1 : x>y ? 1 : 0;
            }
            const fs = require('fs')
            const globber = await glob.create(`${process.env.GHA_TERRAFORM_DIRECTORY}/tfapply.txt.*`)
            const files = await globber.glob()
            files.sort(filesort)
            const codeblockstart = '```tf\n'
            const codeblockend = '\n```\n'
            const downloadlink = `\n[Download Apply Log](${process.env.GHA_ARTIFACT_DOWNLOAD_LINK})\n`;
            let apply = '';
            let n = 0;
            let body = '';
            let header = '';
            let status = ':white_check_mark:';
            if (process.env.GHA_TERRAFORM_APPLY_STATUS != 0) {
              status = ':x:';
            }
            for (const file of files) {
              apply = fs.readFileSync(file, 'utf8');
              if (files.length > 1) {
                n++
                header = `## ${status} Terraform Apply ${process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase()} - Part ${n}/${files.length}\n`;
                if (n == 1) {
                  body = `${header} ${codeblockstart} ${process.env.GHA_TERRAFORM_APPLY_SUMMARY} ${codeblockend} ${codeblockstart} ${apply} ${codeblockend} ${downloadlink}\n`;
                } else {
                  body = `${header} ${codeblockstart} ${apply} ${codeblockend}\n`;
                }
              }else{
                header = `## ${status} Terraform Apply ${process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase()}\n`;
                body = `${header} ${codeblockstart} ${process.env.GHA_TERRAFORM_APPLY_SUMMARY} ${codeblockend} ${codeblockstart} ${apply} ${codeblockend} ${downloadlink}\n`;
              }
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              })
            }
      - if: env.GHA_TERRAFORM_PLAN_STATUS == 0
        name: Terraform Plan No Changes
        shell: bash
        run: |
          GHA_TERRAFORM_PLAN_SUMMARY="## :heavy_check_mark: Terraform Apply - Your infrastructure matches the configuration"
          echo "${GHA_TERRAFORM_PLAN_SUMMARY}" >> $GITHUB_STEP_SUMMARY

      - if: github.event_name == 'pull_request' && env.GHA_TERRAFORM_PLAN_STATUS == 1
        name: Terraform Plan Status Check Comment
        uses: actions/github-script@v8
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## :x: Terraform Plan ${process.env.GHA_TERRAFORM_ENVIRONMENT.toString().toUpperCase()}\n\nTerraform plan failed. \n\n${process.env.GHA_TERRAFORM_PLAN_SUMMARY}`
            })
      - if: (env.GHA_TERRAFORM_PLAN_STATUS != 0 && env.GHA_TERRAFORM_PLAN_STATUS != 2) || env.GHA_TERRAFORM_APPLY_STATUS != 0
        name: Terraform Apply Status Check
        working-directory: ${{ env.GHA_TERRAFORM_DIRECTORY }}
        shell: bash
        run: |
          if [ -f tfapply.txt ]; then
            # get last 20 lines of tfapply.txt to show in summary
            GHA_TERRAFORM_APPLY_SUMMARY=$(tail -n 20 tfapply.txt)
          else
            GHA_TERRAFORM_APPLY_SUMMARY="No tfapply.txt file found"
          fi
          GHA_TERRAFORM_APPLY_SUMMARY="## :x: Terraform Apply failed\n\n${GHA_TERRAFORM_PLAN_SUMMARY}, ${GHA_TERRAFORM_APPLY_SUMMARY}"
          echo "${GHA_TERRAFORM_APPLY_SUMMARY}" >> $GITHUB_STEP_SUMMARY
          exit 99
